{"version":3,"file":"data-fe4c32b4.js","sources":["../../../.svelte-kit/adapter-node/chunks/data.js"],"sourcesContent":["import Database from \"better-sqlite3\";\nimport { b as private_env } from \"./shared-server.js\";\nimport \"./index2.js\";\nimport { isAbsolute, resolve, relative, sep } from \"path\";\nimport FS from \"fs\";\nconst IMGDIR = private_env.IMGDIR;\nconst DATABASE = private_env.DATABASE;\nconsole.log(\"opening \" + DATABASE);\nconst db$1 = new Database(DATABASE);\ndb$1.pragma(\"journal_mode = WAL\");\nclass dbHandler {\n  dbInit() {\n    let query = `CREATE TABLE IF NOT EXISTS Posts (\n\t\t\tpostID INTEGER PRIMARY KEY AUTOINCREMENT, \n\t\t\tboardID INTEGER NOT NULL,\n\t\t\treplyToID INTEGER,\n\t\t\tname TEXT NOT NULL,\n\t\t\tsubject TEXT,\n\t\t\tdateTime TEXT,\n\t\t\tpostText TEXT,\n\t\t\tfileName TEXT,\n\t\t\tposterID TEXT NOT NULL,\n\t\t\tfileExt TEXT\n\t\t)`;\n    db$1.exec(query);\n    query = `CREATE TABLE IF NOT EXISTS Boards (\n\t\t\tboardID INTEGER PRIMARY KEY AUTOINCREMENT, \n\t\t\tboardName TEXT NOT NULL\n\t\t)`;\n    db$1.exec(query);\n    query = `CREATE TABLE IF NOT EXISTS PostTags (\n\t\t\tpostID  INTEGER NOT NULL, \n\t\t\ttagID  INTEGER NOT NULL, \n\t\t\tPRIMARY KEY (postID,tagID) ON CONFLICT IGNORE\n\t\t)`;\n    db$1.exec(query);\n    query = `CREATE TABLE IF NOT EXISTS Tags (\n\t\t\tID\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t\t\tGroupID\tINTEGER,\n\t\t\tName\tTEXT\t\t\t\n\t\t)`;\n    db$1.exec(query);\n    query = `CREATE TABLE IF NOT EXISTS TagGroups (\n\t\t\tID\tINTEGER PRIMARY KEY AUTOINCREMENT,\n\t\t\tName\tTEXT,\n\t\t\tColor\tTEXT\t\t\t\n\t\t)`;\n    db$1.exec(query);\n    this.createTagGroup({ name: \"aqua\", color: \"aqua\" });\n    this.createTagGroup({ name: \"gray\", color: \"gray\" });\n    this.createTagGroup({ name: \"red\", color: \"red\" });\n    this.createTagGroup({ name: \"blue\", color: \"blue\" });\n    this.createTagGroup({ name: \"green\", color: \"green\" });\n  }\n  createTagGroup(group) {\n    const stmt = db$1.prepare(\"Update TagGroups SET name=?,Color=? where (name=?)\");\n    let info = stmt.run(group.name, group.color, group.name);\n    let rowID = -1;\n    if (info.changes <= 0) {\n      const stmt2 = db$1.prepare(\"Insert Into TagGroups (name,Color) VALUES(?,?)\");\n      const info2 = stmt2.run(group.name, group.color);\n      rowID = info2.changes <= 0 ? -1 : info2.lastInsertRowid;\n    }\n    return rowID;\n  }\n  findTagGroups() {\n    let results = [];\n    const stmt = db$1.prepare(\"SELECT ID,Name,Color FROM TagGroups\");\n    const rows = stmt.all();\n    rows.forEach((row) => {\n      results.push({ id: row.ID, name: row.Name, color: row.Color });\n    });\n    return results;\n  }\n  createTag(tag) {\n    tag.groupid = tag.groupid || 1;\n    tag.newname = tag.newname || tag.name;\n    const stmt = db$1.prepare(\"Update Tags SET name=?, groupID=? where (name=?)\");\n    let info = stmt.run(tag.newname, tag.groupid, tag.name);\n    let rowID = -1;\n    if (info.changes <= 0) {\n      const stmt2 = db$1.prepare(\"Insert Into Tags (name,GroupID) VALUES(?,?)\");\n      const info2 = stmt2.run(tag.newname, tag.groupid);\n      rowID = info2.changes <= 0 ? -1 : info2.lastInsertRowid;\n    }\n    return rowID;\n  }\n  deleteTag(tag) {\n    const stmt = db$1.prepare(\"Delete from Tags where (name=?)\");\n    stmt.run(tag.name);\n  }\n  /**\n   * find tags by search-term\n   *\n   * @param {*} search\n   * @return {*} \n   * @memberof dbHandler\n   */\n  findTags(search) {\n    let results = [];\n    const stmt = db$1.prepare(\"SELECT Tags.ID,Tags.Name, TagGroups.ID as GroupID, TagGroups.Color FROM Tags left join TagGroups on Tags.GroupID=TagGroups.ID\");\n    const rows = stmt.all();\n    rows.forEach((row) => {\n      results.push({ id: row.ID, name: row.Name, groupid: row.GroupID, color: row.Color });\n    });\n    return results;\n  }\n  findPostTags(postId) {\n    let results = [];\n    const stmt = db$1.prepare(\"SELECT Tags.ID,Tags.Name, TagGroups.ID as GroupID, TagGroups.Color FROM Tags inner join PostTags on Tags.ID=PostTags.tagId left join TagGroups on Tags.GroupID=TagGroups.ID WHERE PostTags.postID=? \");\n    const rows = stmt.all(postId);\n    rows.forEach((row) => {\n      results.push({ id: row.ID, name: row.Name, groupid: row.GroupID, color: row.Color });\n    });\n    return results;\n  }\n  getTagStatistic() {\n    let results = [];\n    const stmt = db$1.prepare(\"SELECT Tags.ID,max(Tags.Name) as name,count(Tags.ID) as count,max(TagGroups.Color) as color FROM Tags inner join PostTags on Tags.ID=PostTags.tagId left join TagGroups on Tags.GroupID=TagGroups.ID Group by (Tags.ID) order by count desc \");\n    const rows = stmt.all();\n    rows.forEach((row) => {\n      results.push({ id: row.ID, name: row.name, count: row.count, color: row.color });\n    });\n    return results;\n  }\n  createPost(post) {\n    post.userId = \"unknown\";\n    post.boardID = 0;\n    let rowID = -1;\n    const stmt = db$1.prepare(\"Update Posts Set boardId=?,posterID=?, fileName=?, name=? where (name=?)\");\n    let info = stmt.run(post.boardID, post.userId, post.fileName, post.name, post.name);\n    if (info.changes <= 0) {\n      const stmt2 = db$1.prepare(\"Insert Into Posts (boardID,posterId,fileName,name) VALUES(?,?,?,?)\");\n      info = stmt2.run(post.boardID, post.userId, post.fileName, post.name);\n      rowID = info.changes <= 0 ? -1 : info.lastInsertRowid;\n    }\n    return rowID;\n  }\n  getPost(postID) {\n    let results = [];\n    const stmt = db$1.prepare(\"SELECT boardID,postID,name,fileName FROM Posts Where postID=?\");\n    const rows = stmt.all(postID);\n    rows.forEach((row) => {\n      results.push({ id: row.postID, fileName: row.fileName, name: row.name });\n    });\n    return results;\n  }\n  /**\n   *\t\n   * @param {*} search: relative path+name\n   * @return {*} \n   * @memberof dbHandler\n   */\n  findPost(search) {\n    let results = [];\n    const stmt = db$1.prepare(\"SELECT boardID,postID,name,fileName FROM Posts Where fileName=?\");\n    const rows = stmt.all(search);\n    rows.forEach((row) => {\n      results.push({ id: row.postID, fileName: row.fileName, name: row.name });\n    });\n    return results;\n  }\n  /**\n   * Note: the search term has to match exactly\n   *\n   * @param {*} search: is either an array or a commaseparated string containing tags\n   * @return {*} \n   * @memberof dbHandler\n   */\n  findPostByTag(search) {\n    let results = [];\n    const stmt = db$1.prepare(\"select distinct Posts.postID from Posts inner join PostTags on Posts.postID=PostTags.postID inner join Tags on Tags.ID=PostTags.tagID where Tags.name IN(?)\");\n    const rows = stmt.all(search);\n    rows.forEach((row) => {\n      results = [...results, ...this.getPost(row.postID)];\n    });\n    return results;\n  }\n  /**\n   * assign tags to post and remove others\n   *\n   * @param {*} postid\n   * @param {*} tagids\n   * @memberof dbHandler\n   */\n  assignTagToPost(postid, tagids) {\n    let x = tagids.join(\",\");\n    const stmt1 = db$1.prepare(\"Delete From PostTags  Where postID=? AND tagId NOT IN(?)\");\n    stmt1.run(postid, x);\n    const stmt2 = db$1.prepare(\"Insert Into PostTags (postID,tagId) VALUES(?,?)\");\n    for (var i = tagids.length - 1; i >= 0; i--) {\n      stmt2.run(postid, tagids[i]);\n    }\n  }\n}\nasync function processDirectory(abspath, params) {\n  const listDirs = params.listDirs || false;\n  const listFiles = params.listFiles || false;\n  let baseurl;\n  baseurl = relative(IMGDIR, abspath);\n  baseurl = baseurl.length === 0 ? baseurl : baseurl + sep;\n  baseurl = baseurl.replaceAll(\"\\\\\", \"/\");\n  let data = [];\n  let stats = await FS.promises.stat(abspath);\n  if (!stats.isDirectory()) {\n    throw new Error(\"not a directory: \" + abspath);\n  }\n  let entrys = await FS.promises.readdir(abspath, { withFileTypes: true });\n  entrys.sort((a, b) => {\n    let _a = a.name.toLowerCase(), _b = b.name.toLowerCase();\n    return _a > _b ? 1 : _a < _b ? -1 : 0;\n  });\n  for (var i = 0; i < entrys.length; i++) {\n    let isDir = false, entry = entrys[i];\n    if (entry.isDirectory())\n      isDir = true;\n    if (isDir && listDirs || !isDir && listFiles) {\n      data.push({ id: i + 1, name: entry.name, fileName: baseurl + entry.name, isDir });\n    }\n  }\n  return data;\n}\nfunction fetchData(path, params) {\n  params.listDirs = params.listDirs || false, params.listFiles = params.listFiles ? true : false;\n  const page = params.page || 1;\n  const per_page = params.per_page || 5;\n  const fullpath = isAbsolute(path) ? path : resolve(IMGDIR, path);\n  let total, from, to, last_page;\n  let slice = [];\n  if (!params.search) {\n    return new Promise((resolve2, reject) => {\n      processDirectory(fullpath, params).then(\n        (data) => {\n          total = data.length;\n          last_page = Math.ceil(total / per_page);\n          from = (page - 1) * per_page;\n          to = page * per_page;\n          slice = data.slice(from, to);\n          resolve2({\n            \"total\": total,\n            \"per_page\": per_page,\n            \"current_page\": page,\n            \"last_page\": last_page,\n            \"from\": from,\n            \"to\": to,\n            \"data\": slice\n          });\n        }\n      );\n    });\n  } else {\n    return new Promise((resolve2, reject) => {\n      let data = db.findPostByTag(params.search);\n      total = data.length;\n      last_page = Math.ceil(total / per_page);\n      from = (page - 1) * per_page;\n      to = page * per_page;\n      slice = data.slice(from, to);\n      resolve2({\n        \"total\": total,\n        \"per_page\": per_page,\n        \"current_page\": page,\n        \"last_page\": last_page,\n        \"from\": from,\n        \"to\": to,\n        \"data\": slice\n      });\n    });\n  }\n}\nfunction importDirRecursive(path) {\n  let pathstack = [path];\n  let total = 0;\n  function foo() {\n    return new Promise((resolve$1, reject) => {\n      let _path = pathstack.shift();\n      _path = isAbsolute(_path) ? _path : resolve(IMGDIR, _path);\n      processDirectory(_path, { listDirs: false, listFiles: true }).then(\n        (data) => {\n          for (var i = data.length - 1; i >= 0; i--) {\n            let post = { name: data[i].name, fileName: data[i].fileName };\n            db.createPost(post);\n          }\n          total += data.length;\n        }\n      ).then(() => {\n        processDirectory(_path, { listDirs: true, listFiles: false }).then(\n          (data) => {\n            for (var i = data.length - 1; i >= 0; i--) {\n              pathstack.push(data[i].fileName);\n            }\n          }\n        ).then(() => {\n          if (pathstack.length <= 0)\n            resolve$1({ \"total\": total });\n          else\n            foo().then(() => {\n              resolve$1({ \"total\": total });\n            });\n        });\n      });\n    });\n  }\n  return foo();\n}\nfunction createDir(path) {\n  function foo() {\n    let _path = path;\n    _path = isAbsolute(_path) ? _path : resolve(IMGDIR, _path);\n    let dirCreation = FS.mkdir(_path, { recursive: true }, (err) => {\n      if (err)\n        throw err;\n    });\n    return dirCreation;\n  }\n  return foo();\n}\nconst db = new dbHandler();\ndb.dbInit();\nfunction getAllTags() {\n  return db.findTags();\n}\nfunction findTagGroups() {\n  return db.findTagGroups();\n}\nfunction findPostTags(postId) {\n  return db.findPostTags(postId);\n}\nfunction getTagStatistic() {\n  return db.getTagStatistic();\n}\nfunction findPost(search) {\n  return db.findPost(search);\n}\nfunction addPost(post) {\n  db.createPost(post);\n}\nfunction createTag(tag) {\n  db.createTag(tag);\n}\nfunction deleteTag(tag) {\n  db.deleteTag(tag);\n}\nfunction assignTag(postid, idlist) {\n  db.assignTagToPost(postid, idlist);\n}\nexport {\n  IMGDIR as I,\n  findPost as a,\n  findPostTags as b,\n  addPost as c,\n  createDir as d,\n  findTagGroups as e,\n  fetchData as f,\n  getTagStatistic as g,\n  getAllTags as h,\n  importDirRecursive as i,\n  createTag as j,\n  deleteTag as k,\n  assignTag as l\n};\n"],"names":[],"mappings":"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"}